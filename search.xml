<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/08/26/mallioc%E5%92%8Cfree%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/26/mallioc%E5%92%8Cfree%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="malloc和free使用"><a href="#malloc和free使用" class="headerlink" title="malloc和free使用"></a>malloc和free使用</h2><h3 id="基本定义和函数原型"><a href="#基本定义和函数原型" class="headerlink" title="基本定义和函数原型"></a>基本定义和函数原型</h3><h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><p>  学习C/C++的都或多或少听说过malloc和free这两个函数吧，这两个函数是C/C++语言中用于<strong>动态分配内存和释放</strong>的函数，malloc可以向操作系统申请一定量的内存，具体申请多大的内存由参数指定，而free则是用来释放由malloc申请到的内存。malloc动态申请的内存主要来自于进程地址空间的堆区，每个进程在创建并运行的过程中，操作系统会为其分配地址空间，这个地址空间是虚拟地址空间，在32位Linux系统中一般是4GB，其中3GB是用户地址空间，1GB是内核空间，malloc申请的内存空间位于用户地址空间中的堆区。由于C/C++不支持自动垃圾回收机制，所以由malloc动态申请的内存必须由用户自己释放（归还给进程或者操作系统），在程序中我们可以使用free函数来实现对内存的回收。</p><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><p>   malloc和free函数的原型定义在C标准库的stdlib.h头文件中，要使用这两个函数必须先包含这个头文件，否则编译会出错，在C++程序中一般是写成<code>#include&lt;cstdlib&gt;</code>。</p><p>  malloc原型 <br></p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">malloc</span><span class="params">(<span class="keyword">long</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>  free原型 <br></p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> * pointer)</span></span></span><br></pre></td></tr></table></figure><h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例 "></a>使用实例 <br></h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char *p;</span><br><span class="line">    p=(char*)malloc(10);</span><br><span class="line">    if(p == NULL) //必须判断是否分配成功</span><br><span class="line">       cout &lt;&lt; &quot;Not enougth memory&quot; &lt;&lt; endl;</span><br><span class="line">    else</span><br><span class="line">       cout &lt;&lt; &quot;allocated at&quot; &lt;&lt; p &lt;&lt; endl</span><br><span class="line">    //此处可以进行对已分配内存的操作</span><br><span class="line">    if(p!=NULL)&#123;</span><br><span class="line">        free(p); //回收内存</span><br><span class="line">        p = NULL; //注意要让指针置空，防止出现野指针</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   从上述代码可以看出，malloc在分配内存时如果成功返回的是一个无类型指针，在使用之前需要对其进行强制类型转换，并且在分配之后需要对指针进行判空。在程序结束时，我们需要手动使用free函数进行释放，并且需要将指针变量设置为空指针，防止出现野指针而引起程序崩溃。</p><h4 id="使用陷阱"><a href="#使用陷阱" class="headerlink" title="使用陷阱"></a>使用陷阱</h4><ul><li>malloc和free函数应该配对使用，有分配就一定有释放，否则会造成内存泄漏，并且对某块内存只能释放一次，如果释放多次会使程序运行出错，从而引起程序崩溃，因此在程序中禁止对已经释放过的内存进行释放。</li><li>当申请的内存不再需要时，应该对其进行释放，释放之后应该要将指向该内存的所有指针置空，防止出现野指针。并且，已经释放的内存不能再次被访问，除非被重新分配，否则会引起段错误。</li><li>malloc 申请内存可能会失败，在使用之前必须先检查是否可用，避免访问NULL指针而引起错误。</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello,MyBlog</title>
      <link href="/2018/08/25/Hello-MyBlog/"/>
      <url>/2018/08/25/Hello-MyBlog/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
  
  
    
  
</search>
